import os
from flask import Blueprint, render_template, request, flash, redirect, url_for, current_app, session
from werkzeug.utils import secure_filename
from app.x import Mirlt


# Crear un blueprint para la aplicación


main = Blueprint('main', __name__)

import logging

# Configuración básica
logging.basicConfig(
    filename='app.log',  # Nombre del archivo donde se guardarán los logs
    level=logging.INFO,  # Nivel de registro (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format='%(asctime)s - %(levelname)s - %(message)s',  # Formato de los mensajes
)

# Datos ficticios para las entradas del blog
blog_entries = [
    {'title': 'Entrada 1', 'content': 'Contenido de la primera entrada del blog.'},
    {'title': 'Entrada 2', 'content': 'Contenido de la segunda entrada del blog.'},
    {'title': 'Entrada 3', 'content': 'Contenido de la tercera entrada del blog.'},
]

# Configuración para la carga de archivos
UPLOAD_FOLDER = 'app/uploads'  # Carpeta donde se guardarán los archivos subidos
ALLOWED_EXTENSIONS = {'svg'}  # Solo permitimos archivos SVG

# Verifica si el archivo tiene una extensión permitida
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Ruta principal (index) de la app
@main.route('/main', methods=['GET'])
def index():
    username = session.get('username')
    current_app.logger.debug(f"desde index@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE()
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"
    else:
        saludo = ""
    return render_template('index.html', saludo=saludo, empresa=empresa)

@main.route('/logout', methods=['POST'])
def logout():
    # Eliminar el 'username' de la sesión (cerrar sesión)
    session.pop('username', None)
    return redirect(url_for('main.login'))  # Redirigir al login

@main.route('/login', methods=['GET', 'POST'])
def login():
    mensaje = ''
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        # Consulta a la base de datos para verificar las credenciales
        query = f'SELECT * FROM occb_user WHERE username = "{username}" AND password = "{password}"'
        result = Mirlt.DB(query=query, username="").run_query()
        # Verificar si se encontró algún registro
        if result:
            # Si la consulta devuelve resultados, asignar el mensaje desde la base de datos
            mensaje = str(result[0][1])  # Esto asume que el mensaje está en la segunda columna
            session['username'] = result[0][0]
            # Aquí también podrías redirigir al home si las credenciales son correctas
            return redirect(url_for('main.index', username=username))  # Redirigir al home si el login es correcto
        else:
            # Si no se encuentra el usuario o las credenciales no coinciden
            mensaje = "Credenciales incorrectas."
    # Renderizar el template con el mensaje
    return render_template('login.html', mensaje=mensaje, error=["red",mensaje])

# Ruta para cargar imágenes
@main.route('/upload_image', methods=['GET', 'POST'])
def upload_image():
    username = session.get('username')
    current_app.logger.debug(f"desde upload@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""
    if request.method == 'POST':
        file = request.files.get('file')
        if file:
            current_app.logger.debug(f"Archivo recibido: {file.filename}")

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(UPLOAD_FOLDER, filename)
            current_app.logger.debug(f"Guardando archivo en: {file_path}")
            try:
                file.save(file_path)
                flash(f'Archivo {filename} subido correctamente!', 'success')
                current_app.logger.info(f'Archivo {filename} subido correctamente')
            except Exception as e:
                flash(f'Error al guardar el archivo: {e}', 'error')
                current_app.logger.error(f'Error al guardar el archivo {filename}: {e}')
        else:
            flash('Solo se permiten archivos SVG.', 'error')
            current_app.logger.warning('Intento de subir un archivo no SVG.')
    return render_template('upload_image.html', saludo=saludo, empresa=empresa)

# Ruta para la página de edición de usuario (mostrar un formulario de edición)
@main.route('/edit_user', methods=['GET', 'POST'])
def edit_user():
    username = session.get('username')
    current_app.logger.debug(f"desde index@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""

    return render_template('edit_user.html', user=result, saludo= saludo, empresa=empresa)  # Renderizar la plantilla para editar datos



@main.route('/nevera', methods=['GET', 'POST'])
def nevera():
    username = session.get('username')
    current_app.logger.debug(f"desde index@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""
    articulos=Mirlt.DB(f"SELECT * FROM occb_carrito_lista WHERE ").run_query()
    return render_template('nevera.html', user=result, saludo= saludo, empresa=empresa)

# Ruta para guardar los cambios del usuario
@main.route('/save_user_changes', methods=['POST'])
def save_user_changes():
    # Aquí puedes recuperar los datos del formulario y actualizarlos en la base de datos
    username = request.form.get('username')
    email = request.form.get('email')
    # Lógica para guardar los cambios en la base de datos
    # Por ejemplo, actualizar los datos en la base de datos:
    # user = get_user_from_db(session['username'])
    # user.username = username
    # user.email = email
    # db.session.commit()
    # Redirigir al usuario a la página principal o donde desees
    return redirect(url_for('main.index'))

@main.route('/handle_actions', methods=['POST'])
def handle_actions():
    action = request.form.get('action')  # Obtener la acción que se seleccionó
    if action == 'logout':
        # Lógica para cerrar sesión
        session.pop('username', None)  # Eliminar el usuario de la sesión
        return redirect(url_for('main.login'))  # Redirigir al login
    elif action == 'modify_user':
        # Lógica para redirigir a la página de modificación de datos
        return redirect(url_for('main.edit_user'))  # Redirigir a la página de edición de datos
    elif action == 'nevera':
        # Lógica para redirigir a la página de modificación de datos
        return redirect(url_for('main.nevera'))  # Redirigir a la página de edición de datos


    return redirect(url_for('main.index'))  # Redirigir al home por defecto si no se seleccionó ninguna acción
