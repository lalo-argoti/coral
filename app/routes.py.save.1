import os
from flask import Blueprint, render_template, request, flash, redirect, url_for, current_app, session, jsonify
from werkzeug.utils import secure_filename
from app.x import Mirlt
import random
import hashlib

# Crear un blueprint para la aplicación


main = Blueprint('main', __name__)

import logging

# Configuración básica
logging.basicConfig(
    filename='app.log',  # Nombre del archivo donde se guardarán los logs
    level=logging.INFO,  # Nivel de registro (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format='%(asctime)s - %(levelname)s - %(message)s',  # Formato de los mensajes
)

# Datos ficticios para las entradas del blog
blog_entries = [
    {'title': 'Entrada 1', 'content': 'Contenido de la primera entrada del blog.'},
    {'title': 'Entrada 2', 'content': 'Contenido de la segunda entrada del blog.'},
    {'title': 'Entrada 3', 'content': 'Contenido de la tercera entrada del blog.'},
]

# Configuración para la carga de archivos
UPLOAD_FOLDER = 'app/uploads'  # Carpeta donde se guardarán los archivos subidos
ALLOWED_EXTENSIONS = {'svg'}  # Solo permitimos archivos SVG

# Verifica si el archivo tiene una extensión permitida
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Ruta principal (index) de la app
@main.route('/main', methods=['GET'])
def index():
    username = session.get('username')
    current_app.logger.debug(f"desde index@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE()
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"
    else:
        saludo = ""
    return render_template('index.html', saludo=saludo, empresa=empresa)

@main.route('/logout', methods=['POST'])
def logout():
    # Eliminar el 'username' de la sesión (cerrar sesión)
    session.pop('username', None)
    return redirect(url_for('main.login'))  # Redirigir al login

@main.route('/login', methods=['GET', 'POST'])
def login():
    mensaje = ''
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        # Consulta a la base de datos para verificar las credenciales
        query = f'SELECT * FROM occb_user WHERE username = "{username}" AND password = "{password}"'
        result = Mirlt.DB(query=query, username="").run_query()
        # Verificar si se encontró algún registro
        if result:
            # Si la consulta devuelve resultados, asignar el mensaje desde la base de datos
            mensaje = str(result[0][1])  # Esto asume que el mensaje está en la segunda columna
            session['username'] = result[0][0]
            # Aquí también podrías redirigir al home si las credenciales son correctas
            return redirect(url_for('main.index', username=username))  # Redirigir al home si el login es correcto
        else:
            # Si no se encuentra el usuario o las credenciales no coinciden
            mensaje = "Credenciales incorrectas."
    # Renderizar el template con el mensaje
    return render_template('login.html', mensaje=mensaje, error=["red",mensaje])

# Ruta para cargar imágenes
@main.route('/upload_image', methods=['GET', 'POST'])
def upload_image():
    username = session.get('username')
    current_app.logger.debug(f"desde upload@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""
    if request.method == 'POST':
        file = request.files.get('file')
        if file:
            current_app.logger.debug(f"Archivo recibido: {file.filename}")

        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(UPLOAD_FOLDER, filename)
            current_app.logger.debug(f"Guardando archivo en: {file_path}")
            try:
                file.save(file_path)
                flash(f'Archivo {filename} subido correctamente!', 'success')
                current_app.logger.info(f'Archivo {filename} subido correctamente')
            except Exception as e:
                flash(f'Error al guardar el archivo: {e}', 'error')
                current_app.logger.error(f'Error al guardar el archivo {filename}: {e}')
        else:
            flash('Solo se permiten archivos SVG.', 'error')
            current_app.logger.warning('Intento de subir un archivo no SVG.')
    return render_template('upload_image.html', saludo=saludo, empresa=empresa)

# Ruta para la página de edición de usuario (mostrar un formulario de edición)
@main.route('/edit_user', methods=['GET', 'POST'])
def edit_user():
    username = session.get('username')
    current_app.logger.debug(f"desde edit_user@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""

    return render_template('edit_user.html', user=result, saludo= saludo, empresa=empresa)  # Renderizar la plantilla para editar datos



@main.route('/nevera', methods=['GET', 'POST'])
def nevera():
    username = session.get('username')
    #current_app.logger.debug(f"desde nevera@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""
    result= Mirlt.DB(query=f"SELECT * FROM occb_carrito WHERE comprador='{username}'", username=username).run_query() 
    return render_template('nevera.html', datos=result,  saludo= saludo, empresa=empresa)

@main.route('/contenido_nevera/<int:item_id>', methods=['GET', 'POST'])
def contenido_nevera(item_id):
    username = session.get('username')
    #current_app.logger.debug(f"desde contenido_nevera@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    nombre_c=Mirlt.DB(f"SELECT nombre FROM occb_carrito WHERE id={item_id};", username=username).run_query()[0][0]
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""
    query= ( f"""SELECT  cl.id_carrito, cl.id_producto_n,     a.nombre AS nombre_arti FROM occb_carrito_lista cl JOIN     occb_articulo a ON cl.id_producto_n = a.id WHERE     cl.id_carrito = {item_id}; """) 
    result= Mirlt.DB(query=query, username=username).run_query() 
    if result:
        return render_template('contenido_nevera.html', datos=result, saludo= saludo, empresa=empresa , nombre_categoria=nombre_c)
    else: 
        return render_template('contenido_nevera.html', datos=[(item_id,"","no existen productos")], saludo= saludo, empresa=empresa, nombre_categoria=nombre_c)

@main.route('/edit_nevera', methods=['GET', 'POST'])
def edit_nevera():
    username = session.get('username')
    #current_app.logger.debug(f"desde index@routes.py:username={username}")
    result, empresa= Mirlt.DB(query=None, username=username).obtenerUE() 
    empresa= f'{empresa[0][1]} \U0001F4E7{empresa[0][2]} \U0001F4DE{empresa[0][3]} '
    if result:
        saludo = f"{result[0][5]} {result[0][6]}"  
    else:
        saludo = ""

    return render_template('edit_user.html', user=result, saludo= saludo, empresa=empresa)  # Renderizar la plantilla para editar datos



@main.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        
        # Verificar si el usuario ya existe
        usuario_existente = Mirlt.DB(f"SELECT * FROM occb_user WHERE username = '{username}' OR email = '{email}';", username=0).run_query()
        if usuario_existente:
            flash('El usuario o correo ya están registrados.', 'danger')
            return redirect(url_for('register'))

        # Generar un código de verificación
        code = random.randint(100000, 999999)

        # Guardar el código en el campo `salt`
        #query = f"""INSERT INTO occb_user (user_group_id, username, password, salt, firstname, lastname, email, status, date_added, image, code)        VALUES (130230414, '{username}', '', '{code}', '', '', '{email}', 0, NOW(), "","");        """
        query=f""" INSERT INTO occb_user (     user_group_id, username, password, salt, firstname, lastname, email, image, code, ip,      status, date_added, saldo, template, celular, celular2, cedula, banco ,)  VALUES (     130230414, '{username}', '', '{code}', '', '', '{email}', '', '', '',      0, NOW(), '', '', '', '', '', '' ,'');"""
        Mirlt.DB(query, username=0).run_query()
        print(f"Aquí se va a enviar el correo. Código: {code}")  # Simula el envío de correo

        # Guardar temporalmente los datos del usuario
        session['temp_user'] = {'username': username, 'email': email}
        flash(str(code), 'info')
        return redirect(url_for('verify'))

    return render_template('register.html')


@main.route('/verify', methods=['GET', 'POST'])
def verify():
    if 'temp_user' not in session:
        flash('Por favor, regístrate primero.', 'warning')
        return redirect(url_for('register'))

    if request.method == 'POST':
        email = session['temp_user']['email']
        entered_code = request.form['code']

        # Obtener el código desde la base de datos
        user = Mirlt.DB(f"SELECT * FROM occb_user WHERE email = '{email}';", username=0).run_query()
        if user and str(user[0]['salt']) == entered_code:
            # Actualizar el estado del usuario y limpiar el campo `salt`
            query = f"""UPDATE occb_user        SET status = 1, salt = ''            WHERE email = '{email}';            """
            Mirlt.DB(query, username=0).run_query()
            session.pop('temp_user')
            flash('Cuenta creada exitosamente.', 'success')
            return redirect(url_for('register'))
        else:
            flash('Código incorrecto, inténtalo nuevamente.', 'danger')

    return render_template('verify.html')



@main.route('/guardar_despensa', methods=['POST'])
def guardar_despensa():
    data = request.get_json()  # Obtener los datos del frontend (nombre del producto)
    nombre_despensa = data.get('nombre')
    if not nombre_despensa:
        return jsonify({"success": False, "message": "El nombre de la despensa es requerido"})
    try:
        query=   (f"INSERT INTO occb_carrito (comprador, nombre, fechaapertura, fechacierre, estado, valortotal, pago, comprobantePago) VALUES  ({session.get('username')}, '{nombre_despensa}', '2024-11-18', '2024-12-31', 1, 0, 0, 0);")
        Mirlt.DB(query=query,username=0).run_query()
        return jsonify({"success": True, "message": "Despensa guardado exitosamente"})
    except Exception as e:
        return jsonify({"success": False, "message": str(e)})

@main.route('/guardar_producto', methods=['POST'])
def guardar_producto():
    data = request.get_json()  # Obtener los datos del frontend (nombre del producto)
    nombre_producto = data.get('nombre')
    despensa=data.get('referencia')
    if not nombre_producto:
        return jsonify({"success": False, "message": "El nombre del producto es requerido"})
    try:
        # Conectar a la base de datos
        query=   (f"SELECT id FROM occb_articulo WHERE nombre='{nombre_producto}'")
        candidatos=Mirlt.DB(query=query, username="").run_query()
        if candidatos:
               pass
        else:
               query = f"INSERT INTO occb_articulo (nombre, fecha_ingreso, id_categoria,  id_autor, precio, cantidad) VALUES ('{nombre_producto}','2024-10-10',1,1,1.9,100)"
               Mirlt.DB(query=query, username="").run_query()
               query=   (f"SELECT id FROM occb_articulo WHERE nombre='{nombre_producto}'")    
               candidatos=Mirlt.DB(query=query, username="").run_query()
        # Insertar el producto en la base de datos (ajustar según tu esquema)
        query = f"INSERT INTO occb_carrito_lista (id_carrito, id_producto_n, cantidad_n,direccion_entrega, estado_pago, mensajero,guia,entregado) VALUES ({despensa},{candidatos[0][0]},100,0,1,1,0,1)"
        Mirlt.DB(query=query, username="").run_query()
        return jsonify({"success": True, "message": "Producto guardado exitosamente"})
    except Exception as e:
        return jsonify({"success": False, "message": str(e)})

@main.route('/editar_elemento_nevera/<int:item_id>')
def editar_elemento_nevera(item_id):
    return f"Editar elemento con ID: {item_id}"

@main.route('/eliminar_elemento_nevera/<int:item_id>')
def eliminar_elemento_nevera(item_id):
    return f"Eliminar elemento con ID: {item_id}"

# Ruta para guardar los cambios del usuario
@main.route('/save_user_changes', methods=['POST'])
def save_user_changes():
    # Aquí puedes recuperar los datos del formulario y actualizarlos en la base de datos
    username = request.form.get('username')
    email = request.form.get('email')
    # Lógica para guardar los cambios en la base de datos
    # Por ejemplo, actualizar los datos en la base de datos:
    # user = get_user_from_db(session['username'])
    # user.username = username
    # user.email = email
    # db.session.commit()
    # Redirigir al usuario a la página principal o donde desees
    return redirect(url_for('main.index'))



# Crear el usuario inicial si no existe
def crear_usuario_inicial():
    usuario_existente = Mir("SELECT * FROM occb_user WHERE username = 'juan';")
    if not usuario_existente:
        hashed_password = hashlib.sha256('123'.encode()).hexdigest()  # Hashear la contraseña
        query = f"""
        INSERT INTO occb_user (user_group_id, username, password, salt, firstname, lastname, email, status, date_added)
        VALUES (130230414, 'juan', '{hashed_password}', '', 'Juan', 'Perez', 'juan@example.com', 1, NOW());
        """
        Mirlt.DB(query)
        print("Usuario 'juan' creado con contraseña '123'.")






@main.route('/handle_actions', methods=['POST'])
def handle_actions():
    action = request.form.get('action')  # Obtener la acción que se seleccionó
    if action == 'logout':
        # Lógica para cerrar sesión
        session.pop('username', None)  # Eliminar el usuario de la sesión
        return redirect(url_for('main.login'))  # Redirigir al login
    elif action == 'modify_user':
        # Lógica para redirigir a la página de modificación de datos
        return redirect(url_for('main.edit_user'))  # Redirigir a la página de edición de datos
    elif action == 'nevera':
        # Lógica para redirigir a la página de modificación de datos
        return redirect(url_for('main.nevera'))  # Redirigir a la página de edición de datos
    elif action == 'agregar_a_nevera':
        # Lógica para redirigir a la página de modificación de datos
        return redirect(url_for('main.agregar_a_nevera'))  # Redirigir a la página de edición de datos


    return redirect(url_for('main.index'))  # Redirigir al home por defecto si no se seleccionó ninguna acción
